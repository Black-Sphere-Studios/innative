cmake_minimum_required(VERSION 3.13.4)
project(innative_sdk VERSION 0.1.10)
option(DYNAMIC_RUNTIME "if true, dynamically links (/MD) to the C++ runtime on MSVC. Otherwise, statically links (/MT)" OFF)
option(BUILD_SHARED_LIBS "enable shared library" ON)

if(MSVC)
  set(RUNTIME_FLAG "MT")
  if(DYNAMIC_RUNTIME)
    set(RUNTIME_FLAG "MD")
  endif()
else()
  set(CPP_WARNINGS "-Wall -Wno-attributes -Wno-unknown-pragmas -Wno-missing-braces -Wno-unused-function -Wno-comment -Wno-char-subscripts -Wno-sign-compare -Wno-unused-variable -Wno-switch -Wno-parentheses")
endif()

if (MSVC)
  if("${MSVC_C_ARCHITECTURE_ID}" STREQUAL "X86")
    set(TARGET_ARCH "i686")
  elseif("${MSVC_C_ARCHITECTURE_ID}" STREQUAL "x64")
    set(TARGET_ARCH "x86_64")
  elseif("${MSVC_C_ARCHITECTURE_ID}" STREQUAL "ARM")
    set(TARGET_ARCH "arm")
  else()
    message(FATAL_ERROR "Failed to determine the MSVC target architecture: ${MSVC_C_ARCHITECTURE_ID}")
  endif()
else()
  execute_process(
    COMMAND ${CMAKE_C_COMPILER} -dumpmachine
    RESULT_VARIABLE RESULT
    OUTPUT_VARIABLE TARGET_ARCH
    ERROR_QUIET
  )
  if (RESULT)
    message(FATAL_ERROR "Failed to determine target architecture triplet: ${RESULT}")
  endif()
  string(REGEX MATCH "([^-]+).*" ARCH_MATCH ${TARGET_ARCH})
  if (NOT CMAKE_MATCH_1 OR NOT ARCH_MATCH)
    message(FATAL_ERROR "Failed to match the target architecture triplet: ${TARGET_ARCH}")
  endif()
  set(TARGET_ARCH ${CMAKE_MATCH_1})
endif()
message(STATUS "Target architecture - ${TARGET_ARCH}")

if(TARGET_ARCH MATCHES "i386")
  set(TARGET_ARCH "x86")
elseif(TARGET_ARCH MATCHES "i486")
  set(TARGET_ARCH "x86")
elseif(TARGET_ARCH MATCHES "i586")
  set(TARGET_ARCH "x86")
elseif(TARGET_ARCH MATCHES "i686")
  set(TARGET_ARCH "x86")
elseif(TARGET_ARCH MATCHES "amd64")
  set(TARGET_ARCH "x64")
elseif(TARGET_ARCH MATCHES "x86_64")
  set(TARGET_ARCH "x64")
elseif(TARGET_ARCH MATCHES "xscale")
  set(TARGET_ARCH "arm")
elseif(TARGET_ARCH MATCHES "ARM")
  set(TARGET_ARCH "arm")
elseif(TARGET_ARCH MATCHES "powerpc")
  set(TARGET_ARCH "ppc")
elseif(TARGET_ARCH MATCHES "powerpcspe")
  set(TARGET_ARCH "ppc")
elseif(TARGET_ARCH MATCHES "powerpc64")
  set(TARGET_ARCH "ppc64")
elseif(TARGET_ARCH MATCHES "ppu")
  set(TARGET_ARCH "ppc64")
elseif(TARGET_ARCH MATCHES "risc-v")
  set(TARGET_ARCH "riscv")
elseif(TARGET_ARCH MATCHES "riscv32")
  set(TARGET_ARCH "riscv")
else()
  message(FATAL_ERROR, "Can't figure out what architecture to build for!")
endif()
  
if (CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(BIN_DIR "windows")
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(BIN_DIR "linux")
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set(BIN_DIR "darwin")
elseif(CMAKE_SYSTEM_NAME MATCHES "Android")
    set(BIN_DIR "android")
elseif(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
    set(BIN_DIR "freebsd")
else()
  message(FATAL_ERROR, "Can't figure out what platform we're on!")
endif()

set(BIN_DIR "bin-${BIN_DIR}-${TARGET_ARCH}")

set(CMAKE_VERBOSE_MAKEFILE TRUE)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

add_subdirectory(innative)
add_subdirectory(innative-env)
add_subdirectory(innative-cmd)
add_subdirectory(innative-stub)
#add_subdirectory(innative-loader)
add_subdirectory(innative-assemblyscript)
add_subdirectory(innative-test-embedding)
add_subdirectory(innative-test)
